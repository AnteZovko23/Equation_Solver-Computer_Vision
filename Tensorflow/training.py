# -*- coding: utf-8 -*-
"""Training

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O8b1EwMq89PLMUgCtj1cC-X8NiOzW6fC
"""


"""
Author: Ante Zovko
Date: Jan 3rd, 2022
Description: Convolutional Neural Network that recognizes handwritten mathematical symbols
[(', ')', '+', '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9','/', 'x']

Dataset: Obtained from kaggle.com https://www.kaggle.com/xainano/handwrittenmathsymbols

"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten, Conv2D, MaxPooling2D
from google.colab import drive

import cv2

dataset_location = 'dataset'

from tensorflow.python.keras.engine import training
# Training dataset
training_dataset = tf.keras.utils.image_dataset_from_directory(
  dataset_location,
  labels='inferred',
  label_mode='categorical',
  class_names=['(', ')', '+', '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9','forward_slash', 'times'],
  color_mode='grayscale',
  batch_size=128,
  image_size=(45, 45),
  shuffle=True,
  seed=42,
  validation_split=0.2,
  subset="training")

# validation dataset
validation_dataset = tf.keras.utils.image_dataset_from_directory(
  dataset_location,
  labels='inferred',
  label_mode='categorical',
  class_names=['(', ')', '+', '-', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9','forward_slash', 'times'],
  color_mode='grayscale',
  batch_size=128,
  image_size=(45, 45),
  shuffle=True,
  seed=42,
  validation_split=0.2,
  subset="validation")

# Running on a GPU
# Model compilation

model = Sequential()

model.add(tf.keras.Input(shape=(45,45,1)))
tf.keras.layers.Rescaling(1./255)

model.add(Conv2D(32, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size =(2, 2))) 
		
model.add(Conv2D(32, (2, 2))) 
model.add(Activation('relu')) 
model.add(MaxPooling2D(pool_size =(2, 2))) 
		
model.add(Conv2D(64, (2, 2))) 
model.add(Activation('relu')) 
model.add(MaxPooling2D(pool_size =(2, 2))) 
		
model.add(Flatten()) 
model.add(Dense(64)) 
model.add(Activation('relu')) 
model.add(Dropout(0.5)) 
model.add(Dense(16)) 
model.add(Activation('softmax'))
  
model.compile(optimizer=tf.keras.optimizers.Adam(), loss=tf.keras.losses.CategoricalCrossentropy(), metrics=["accuracy"])

model.fit(training_dataset, validation_data=validation_dataset, epochs=10, callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=5)])

model.summary()


loss, acc = model.evaluate(validation_dataset, verbose=2)
print("Untrained model, accuracy: {:5.2f}%".format(100 * acc))

# Save the entire model as a SavedModel.
model.save('saved_model/my_model')